{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples/TextInputBEM/ExampleOptional.js","docs/examples/TextInputCSSModules/ExampleError.js","docs/examples/TextInputCSSModules/ExampleOptional.js","docs/examples/TextInputStyledComponents/ExampleError.js","docs/examples/TextInputStyledComponents/ExampleOptional.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationFormContainer/RegistrationFormContainer.js","docs/examples/RegistrationFormContainer/ExampleRegistrationFormContainer.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/TextInputCSSModules/TextInputCSSModules.js","components/TextInputCSSModules/index.js","components/TextInputStyledComponents/TextInputStyledComponents.js","components/TextInputStyledComponents/index.js","components/TextInputBEM/TextInputBEM.js","components/TextInputBEM/index.js","components/TextInputCSSModules/textInput.module.css","../config/componentData.js"],"names":["Label","_ref","htmlFor","label","required","react_default","a","createElement","style","display","color","__webpack_require__","d","__webpack_exports__","Label_Label","r","EyeIconExample","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ExampleOptional","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ExampleAllFeatures","props","_this","Object","_Users_viv_repos_ps_react_viv_li_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_viv_repos_ps_react_viv_li_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_viv_repos_ps_react_viv_li_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","password","length","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","assign","htmlId","name","onChange","event","setState","target","value","minLength","placeholder","showVisibilityToggle","quality","getQuality","React","Component","Example100Percent","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","percent","width","height","Example10Percent","Example70Percent","ExampleError","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_6__","error","ps_react_TextInputBEM__WEBPACK_IMPORTED_MODULE_6__","ps_react_TextInputCSSModules__WEBPACK_IMPORTED_MODULE_6__","ps_react_TextInputStyledComponents__WEBPACK_IMPORTED_MODULE_6__","TextInput","_ref$type","type","_ref$required","children","objectWithoutProperties","marginBottom","id","border","className","TextInput_TextInput","ProgressBar","getColor","getWidthAsPercentOfTotalWidth","parseInt","_this$props","backgroundColor","defaultProps","components_ProgressBar_ProgressBar","HelloWorld","message","ExampleHelloWorld","HelloWorld_HelloWorld","RegistrationFormContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","user","onSubmit","validate","submitted","email","errors","minPasswordLength","concat","getOwnPropertyNames","_this$state","_this$state$user","confirmationMessage","PasswordInput","passwordQuality","maxLength","onClick","ExampleRegistrationFormContainer","console","log","components_RegistrationFormContainer_RegistrationFormContainer","map","./EyeIcon/Example","./EyeIcon/Example.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationFormContainer/ExampleRegistrationFormContainer","./RegistrationFormContainer/ExampleRegistrationFormContainer.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputBEM/ExampleOptional","./TextInputBEM/ExampleOptional.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputCSSModules/ExampleOptional","./TextInputCSSModules/ExampleOptional.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","./TextInputStyledComponents/ExampleOptional","./TextInputStyledComponents/ExampleOptional.js","webpackContext","req","webpackContextResolve","e","Error","code","keys","resolve","module","exports","Navigation","components","key","href","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","preventDefault","prevState","showCode","_this$props$example","example","description","ExampleComponent","require","componentName","default","docs_CodeExample","Props","defaultValue","ComponentPage","component","examples","docs_Example","docs_Props","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","configure","adapter","Adapter","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","toggleShowPassword","showPassword","marginLeft","EyeIcon","components_PasswordInput_PasswordInput","xmlns","viewBox","transform","fill","cx","cy","EyeIcon_EyeIcon","TextInputCSSModules","styles","fieldset","inputError","defineProperty","TextInputCSSModules_TextInputCSSModules","TextInputStyledComponents","styled","div","_templateObject","Input","input","_templateObject2","Fieldset","_templateObject3","TextInputStyledComponents_TextInputStyledComponents","TextInputBEM","TextInputBEM_TextInputBEM","computed"],"mappings":"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","file":"static/js/main.98003aeb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;","export {default} from './Label';","import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 100% progress */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />\n}","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />\n}","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\n\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInputStyledComponents from 'ps-react/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}","import React from 'react';\nimport TextInputStyledComponents from 'ps-react/TextInputStyledComponents';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;","export {default} from './TextInput';","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","export {default} from './ProgressBar';","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** A super lame component that says Hello with a custom message. */\nfunction HelloWorld({message}) {\n  return <div>Hello {message}</div>\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;","import React from 'react';\nimport HelloWorld from 'ps-react/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Pluralsight viewers!\" />\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationFormContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <form>\n          <TextInput\n            htmlId=\"registration-form-email\"\n            name=\"email\"\n            onChange={this.onChange}\n            label=\"Email\"\n            value={email}\n            error={errors.email}\n            required />\n\n          <PasswordInput\n            htmlId=\"registration-form-password\"\n            name=\"password\"\n            value={password}\n            onChange={this.onChange}\n            quality={this.passwordQuality(password)}\n            showVisibilityToggle\n            maxLength={50}\n            error={errors.password} />\n\n          <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n        </form>\n      </div>\n    )\n  }\n}\n\nRegistrationFormContainer.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationFormContainer.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationFormContainer;","import React from 'react';\nimport RegistrationFormContainer from 'ps-react/RegistrationFormContainer';\n\nexport default class ExampleRegistrationFormContainer extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationFormContainer onSubmit={this.onSubmit} />\n  }\n}","var map = {\n\t\"./EyeIcon/Example\": 123,\n\t\"./EyeIcon/Example.js\": 123,\n\t\"./HelloWorld/ExampleHelloWorld\": 235,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 235,\n\t\"./Label/ExampleOptional\": 124,\n\t\"./Label/ExampleOptional.js\": 124,\n\t\"./Label/ExampleRequired\": 125,\n\t\"./Label/ExampleRequired.js\": 125,\n\t\"./PasswordInput/ExampleAllFeatures\": 126,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 126,\n\t\"./ProgressBar/Example100Percent\": 127,\n\t\"./ProgressBar/Example100Percent.js\": 127,\n\t\"./ProgressBar/Example10Percent\": 128,\n\t\"./ProgressBar/Example10Percent.js\": 128,\n\t\"./ProgressBar/Example70Percent\": 129,\n\t\"./ProgressBar/Example70Percent.js\": 129,\n\t\"./RegistrationFormContainer/ExampleRegistrationFormContainer\": 236,\n\t\"./RegistrationFormContainer/ExampleRegistrationFormContainer.js\": 236,\n\t\"./TextInput/ExampleError\": 130,\n\t\"./TextInput/ExampleError.js\": 130,\n\t\"./TextInput/ExampleOptional\": 131,\n\t\"./TextInput/ExampleOptional.js\": 131,\n\t\"./TextInputBEM/ExampleError\": 132,\n\t\"./TextInputBEM/ExampleError.js\": 132,\n\t\"./TextInputBEM/ExampleOptional\": 133,\n\t\"./TextInputBEM/ExampleOptional.js\": 133,\n\t\"./TextInputCSSModules/ExampleError\": 134,\n\t\"./TextInputCSSModules/ExampleError.js\": 134,\n\t\"./TextInputCSSModules/ExampleOptional\": 135,\n\t\"./TextInputCSSModules/ExampleOptional.js\": 135,\n\t\"./TextInputStyledComponents/ExampleError\": 136,\n\t\"./TextInputStyledComponents/ExampleError.js\": 136,\n\t\"./TextInputStyledComponents/ExampleOptional\": 137,\n\t\"./TextInputStyledComponents/ExampleOptional.js\": 137\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 245;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map( name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return {showCode: !prevState.showCode};\n    });\n  }\n\n  render() {\n    const {showCode} = this.state;\n    const {code, description, name} = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4> }\n\n        <ExampleComponent />\n\n        <p>\n          <button onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </button>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })\n      }\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n  const {name, description, props, examples} = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n        examples.map( example => <Example key={example.code} example={example} componentName={name} /> ) :\n        \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n        <Props props={props} /> :\n        \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({route: window.location.hash.substr(1)})\n    })\n  }\n\n  render() {\n    const {route} = this.state;\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\n\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Docs from './docs/Docs';\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport './index.css';\nimport '../node_modules/highlight.js/styles/ocean.css'\nimport * as serviceWorker from './serviceWorker';\n\nconfigure({ adapter: new Adapter() });\nReactDOM.render(<Docs />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={129} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;","export {default} from './PasswordInput';","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;","export {default} from './EyeIcon';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.module.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInputCSSModules({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInputCSSModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCSSModules;","export {default} from './TextInputCSSModules';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInputStyledComponents({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: red;\n  `\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name} \n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInputStyledComponents.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledComponents;","export {default} from './TextInputStyledComponents';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInputBEM({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && \"textinput__input--state-error\"}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;","import './textInput.css';\nexport {default} from './TextInputBEM';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__3Weri\",\"inputError\":\"textInput_inputError__2zM_V\",\"fieldset\":\"textInput_fieldset__2FUpQ\"};","module.exports =\n/* eslint-disable */\n[{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport EyeIcon from 'ps-react/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super lame component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"'World'\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** A super lame component that says Hello with a custom message. */\\nfunction HelloWorld({message}) {\\n  return <div>Hello {message}</div>\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: 'World'\\n};\\n\\nexport default HelloWorld;\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from 'react';\\nimport HelloWorld from 'ps-react/HelloWorld';\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Pluralsight viewers!\\\" />\\n}\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label} { required && <span style={{color: 'red'}}> *</span> }\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={129} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: ''\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  }\\n\\n  render() {\\n    const {percent, width, height} = this.props;\\n    return (\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 100% progress */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />\\n}\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />\\n}\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />\\n}\"\n  }]\n}, {\n  \"name\": \"RegistrationFormContainer\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationFormContainer extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <form>\\n          <TextInput\\n            htmlId=\\\"registration-form-email\\\"\\n            name=\\\"email\\\"\\n            onChange={this.onChange}\\n            label=\\\"Email\\\"\\n            value={email}\\n            error={errors.email}\\n            required />\\n\\n          <PasswordInput\\n            htmlId=\\\"registration-form-password\\\"\\n            name=\\\"password\\\"\\n            value={password}\\n            onChange={this.onChange}\\n            quality={this.passwordQuality(password)}\\n            showVisibilityToggle\\n            maxLength={50}\\n            error={errors.password} />\\n\\n          <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n        </form>\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationFormContainer.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationFormContainer.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationFormContainer;\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationFormContainer\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationFormContainer from 'ps-react/RegistrationFormContainer';\\n\\nexport default class ExampleRegistrationFormContainer extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  render() {\\n    return <RegistrationFormContainer onSubmit={this.onSubmit} />\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInputBEM({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && \\\"textinput__input--state-error\\\"}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"textinput__error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInputBEM.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputBEM;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputBEM from 'ps-react/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInputBEM from 'ps-react/TextInputBEM';\\n\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.module.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInputCSSModules({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInputCSSModules.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputCSSModules;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\\n\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInputStyledComponents({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  const Error = styled.div`\\n    color: red;\\n  `\\n\\n  const Input = styled.input`\\n    border: ${error && 'solid 1px red'};\\n    display: block;\\n  `;\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name} \\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n};\\n\\nTextInputStyledComponents.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputStyledComponents;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputStyledComponents from 'ps-react/TextInputStyledComponents';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponents\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInputStyledComponents from 'ps-react/TextInputStyledComponents';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponents\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\"\n  }]\n}];"],"sourceRoot":""}